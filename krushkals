#include <stdio.h>
#include <stdlib.h>
int n,cost[10][10];

int find(int node,int parent[]){
while(parent[node]!=node)
    node=parent[node];
return node;
}
int union_ij(int i,int j,int parent[]){
if(i<j)
    parent[j]=i;
else
    parent[i]=j;
}
void krushkals_mst(){
int count=0,sum=0,k=0,i,j,u,v,min,parent[10],t[10][2];
for(i=0;i<n;i++){
    parent[i]=i;
}
while(count<n){
    min=999;
    for(i=0;i<n;i++){
        for(j=0;j<n;j++){
            if(cost[i][j]<min){
                min=cost[i][j];
                u=i;
                v=j;
            }
        }
    }
    if(min==999)
        break;
    i=find(u,parent);
    j=find(v,parent);
    if(i!=j){
        t[k][0]=u;
        t[k][1]=v;
        k++;
        count++;
        sum=sum+min;
        union_ij(i,j,parent);
    }
        cost[u][v]=cost[v][u]=999;
}
if(count==n-1){
    printf("the minimum spanning tree sum=%d\n",sum);
    printf("the minimum spanning tree is\n");
    for(i=0;i<n-1;i++){
            printf("%d-->%d\n",t[i][0],t[i][1]);
        }
}
else{
    printf("mst not exist\n");
}
}
int main()
{
printf("enter number of vertices\n");
scanf("%d",&n);
printf("enter the matrix\n");
for(int i=0;i<n;i++){
    for(int j=0;j<n;j++){
        scanf("%d",&cost[i][j]);
        if(cost[i][j]==0){
            cost[i][j]=999;
        }
    }
}
krushkals_mst();
}
