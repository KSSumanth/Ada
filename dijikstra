#include <stdio.h>
#include <stdlib.h>
int cost[20][20],p[10],d[10],n;

int dij(int source,int destination){
int i,j,u,min,s[10];
for(int i=0;i<n;i++){
    d[i]=cost[source][i];
    s[i]=0;
    p[i]=source;
}
s[source]=1;
for(i=1;i<n;i++){
    min=999;
    u=-1;
    for(j=0;j<n;j++){
        if(d[j]<min && s[j]==0){
            min=d[j];
            u=j;
        }
    }
    if(u==-1)
        return;
    s[u]=1;
    if(u==destination)
        return;
    for(int v=0;v<n;v++){
        if((d[u]+cost[u][v]<d[v]) && s[v]==0){
            d[v]=d[u]+cost[u][v];
            p[v]=u;
        }
    }
}
}
void print_path(int source){
int destination,i;
for(destination=0;destination<n;destination++){
    dij(source,destination);
    if(d[destination]==999){
        printf("the vertex is not reachable\n");
    }
    else{
        printf("the shortest path is \n");
        i=destination;
        while(i!=source){
            printf("%d<-",i);
            i=p[i];
        }
        printf("%d=%d",i,d[destination]);
    }
}
}

int main()
{
    int source;
    printf("enter the number of vertices\n");
    scanf("%d",&n);
    printf("enter the matrix\n");
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            scanf("%d",&cost[i][j]);
        }
    }
    printf("enter the source vertex\n");
    scanf("%d",&source);
    print_path(source);
}

